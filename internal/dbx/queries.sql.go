// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: queries.sql

package dbx

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  name, email, encrypted_password
) VALUES (
  $1::text, $2::text, $3::text
) RETURNING id, name, email, encrypted_password, created_at, updated_at
`

type CreateUserParams struct {
	Name              string
	Email             string
	EncryptedPassword string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Name, arg.Email, arg.EncryptedPassword)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.EncryptedPassword,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const fetchUserByEmail = `-- name: FetchUserByEmail :one
SELECT id, name, email, encrypted_password, created_at, updated_at FROM users
WHERE email = $1::text LIMIT 1
`

func (q *Queries) FetchUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, fetchUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.EncryptedPassword,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
